{
	"name": "SCDTYPE2_Ex",
	"properties": {
		"folder": {
			"name": "SRi"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_EMPTABLE",
						"type": "DatasetReference"
					},
					"name": "EmpTable"
				},
				{
					"dataset": {
						"referenceName": "DS_EMPFILE",
						"type": "DatasetReference"
					},
					"name": "EmpFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_EMPTABLE",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_EMPTABLE",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "EmpSelect"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          address as string,",
				"          isactive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EmpTable",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmpFile",
				"EmpTable select(mapColumn(",
				"          id_db = id,",
				"          isactive_db = isactive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> EmpSelect",
				"EmpFile, EmpSelect lookup(id == id_db,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(id_db)) ~> filter1",
				"filter1 derive(isactive_db = 0) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          id,",
				"          isactive = isactive_db",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"EmpFile derive(isactive = 1) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          id,",
				"          name,",
				"          address,",
				"          isactive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 alterRow(updateIf(1==1)) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          address as string,",
				"          isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          address as string,",
				"          isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}